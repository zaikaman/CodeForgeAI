import { Router } from 'express';
import { supabase } from '../../storage/SupabaseClient';
import archiver from 'archiver';
import { z } from 'zod';

const router = Router();

// Validation schema for download request
const downloadRequestSchema = z.object({
  generationId: z.string().min(1, 'Generation ID is required'),
});

router.post('/download', async (req, res): Promise<void> => {
  try {
    // Validate request body
    const { generationId } = downloadRequestSchema.parse(req.body);
    
    // Fetch generation from database
    const { data: generation, error } = await supabase
      .from('generations')
      .select('*')
      .eq('id', generationId)
      .single();

    if (error || !generation) {
      res.status(404).json({
        success: false,
        error: 'Generation not found',
      });
      return;
    }

    if (!generation.files || generation.files.length === 0) {
      res.status(400).json({
        success: false,
        error: 'No files found in this generation',
      });
      return;
    }

    // Set response headers for zip download
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const filename = `codeforge-${generationId.slice(0, 8)}-${timestamp}.zip`;
    
    res.setHeader('Content-Type', 'application/zip');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

    // Create zip archive
    const archive = archiver('zip', {
      zlib: { level: 9 } // Maximum compression
    });

    // Handle archive errors
    archive.on('error', (err) => {
      console.error('Archive error:', err);
      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: 'Failed to create zip archive',
        });
      }
    });

    // Pipe archive to response
    archive.pipe(res);

    // Add files to archive
    generation.files.forEach((file: { path: string; content: string }) => {
      archive.append(file.content, { name: file.path });
    });

    // Add a README with generation info
    const readmeContent = `# CodeForge AI Generation

Generation ID: ${generationId}
Created: ${generation.created_at}
Prompt: ${generation.prompt}

## Files Generated
${generation.files.map((f: { path: string }) => `- ${f.path}`).join('\n')}

---
Generated by CodeForge AI
https://codeforge.ai
`;
    
    archive.append(readmeContent, { name: 'README.md' });

    // Finalize the archive
    await archive.finalize();

  } catch (error: any) {
    console.error('Download error:', error);
    
    // Handle validation errors
    if (error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'Invalid request data',
        details: error.errors,
      });
      return;
    }

    // Handle other errors
    if (!res.headersSent) {
      res.status(500).json({
        success: false,
        error: error.message || 'Download failed',
      });
    }
  }
});

export default router;
